Q)  Sliding Window Protocol with Go-Back-N

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>  
#include <time.h>    

#define WINDOW_SIZE 4  
define FRAME_COUNT 10
#define TIMEOUT 3     

typedef struct {
    int seq_num;
    char data[100];  
} Frame;

typedef struct {
    Frame frames[WINDOW_SIZE];
    int base;
    int next_seq_num;
    time_t timer[WINDOW_SIZE];
} Sender;

typedef struct {
    int expected_seq_num;
} Receiver;


void send_frame(Sender *sender, Frame frame);
void transmit_frame(Frame frame);
void receive_ack(Sender *sender, int ack_num);
bool is_timed_out(Sender *sender, int seq_num);
void retransmit_frames(Sender *sender);
void deliver_frame(Frame frame);


void send_frame(Sender *sender, Frame frame) {
    if (sender->next_seq_num < sender->base + WINDOW_SIZE) {
        
        frame.seq_num = sender->next_seq_num;
        sender->frames[sender->next_seq_num % WINDOW_SIZE] = frame;
        transmit_frame(frame);

        
        sender->timer[sender->next_seq_num % WINDOW_SIZE] = time(NULL);
        sender->next_seq_num++;
    } else {
        printf("Window is full. Cannot send frame.\n");
    }
}


void transmit_frame(Frame frame) {
    printf("Sending frame with sequence number: %d, Data: %s\n", frame.seq_num, frame.data);
}


void receive_ack(Sender *sender, int ack_num) {
    if (ack_num >= sender->base && ack_num < sender->next_seq_num) {
        printf("Acknowledgment received for sequence number: %d\n", ack_num);
        sender->base = ack_num + 1;  
    } else {
        printf("Received ACK for an unknown sequence number: %d\n", ack_num);
    }
}


bool is_timed_out(Sender *sender, int seq_num) {
    return difftime(time(NULL), sender->timer[seq_num % WINDOW_SIZE]) > TIMEOUT;
}


void retransmit_frames(Sender *sender) {
    for (int i = sender->base; i < sender->next_seq_num; i++) {
        if (is_timed_out(sender, i)) {
            printf("Timeout for frame with sequence number: %d. Retransmitting...\n", i);
            Frame frame = sender->frames[i % WINDOW_SIZE];
            transmit_frame(frame);
            sender->timer[i % WINDOW_SIZE] = time(NULL);  S
        }
    }
}


void deliver_frame(Frame frame) {
    printf("Delivered frame with sequence number: %d, Data: %s\n", frame.seq_num, frame.data);
}


int main() {
    Sender sender = { .base = 0, .next_seq_num = 0 };
    Receiver receiver = { .expected_seq_num = 0 };


    for (int i = 0; i < WINDOW_SIZE; i++) {
        sender.timer[i] = 0;
    }


    printf("Sending frames...\n");
    for (int i = 0; i < FRAME_COUNT; i++) {
        Frame frame;
        snprintf(frame.data, sizeof(frame.data), "Data %d", i);  
        send_frame(&sender, frame);
        sleep(1);  
    }


    printf("\nReceiving acknowledgments...\n");
    for (int i = 0; i < FRAME_COUNT; i++) {
        receive_ack(&sender, i);
        sleep(1);  
    }


    printf("\nChecking for timeouts and retransmissions...\n");
    retransmit_frames(&sender);

    return 0;
}



Q)1. Data Link Layer Framing Methods (Character, Character Stuffing, Bit Stuffing)

#include <stdio.h>
#include <string.h>

#define FLAG '*'
#define ESCAPE '/'


void char_framing(const char *data) {
    printf("\nCharacter Framing:\n");
    printf("%c%s%c\n", FLAG, data, FLAG); 
}

void char_stuffing(const char *data) {
    printf("\nCharacter Stuffing:\n");
    printf("%c", FLAG); 
    for (int i = 0; i < strlen(data); i++) {
        if (data[i] == FLAG || data[i] == ESCAPE) {
            printf("%c", ESCAPE); 
        }
        printf("%c", data[i]);    
 }
    printf("%c\n", FLAG); 
}


void bit_stuffing(const char *data) {
    printf("\nBit Stuffing:\n");
    int count = 0;
    printf("01111110 "); 
    for (int i = 0; data[i] != '\0'; i++) {
        if (data[i] == '1') {
            count++;
            printf("1");
        } else {
            count = 0;
            printf("0");
        }
        if (count == 5) {
            printf("0"); 
            count = 0;
        }
    }
    printf(" 01111110\n");
}

int main() {
    char data[100];
    printf("Enter data to frame: ");
    scanf("%s", data);

    char_framing(data);     
    char_stuffing(data);    

    printf("\nEnter binary data for bit stuffing: ");
    scanf("%s", data);
    bit_stuffing(data);     

    return 0;
}


input:-
Enter data to frame: ABCDE
Enter binary data for bit stuffing: 111110111101


output:-
Character Framing:
*ABCDE*

Character Stuffing:
*/ABCDE*

Bit Stuffing:
01111110 1111100111101 01111110


Q) Frame Sorting Techniques
#include <stdio.h>

#define MAX_FRAMES 10


void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int frames[MAX_FRAMES];
    int n, i;

    
    printf("Enter the number of frames (up to %d): ", MAX_FRAMES);
    scanf("%d", &n);

    if (n > MAX_FRAMES) {
        printf("Number of frames exceeds the limit of %d.\n", MAX_FRAMES);
        return 1;
    }

    
    printf("Enter the frame numbers:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &frames[i]);
    }

   
    bubbleSort(frames, n);

    
    printf("Sorted Frames:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", frames[i]);
    }
    printf("\n");

    return 0;
}


input:-
Enter the number of frames (up to 10): 5
Enter the frame numbers:
4 2 5 1 3

output:-
Sorted Frames:
1 2 3 4 5


Q)Dijkstra's Algorithm
#include <stdio.h>
#include <limits.h>

#define MAX 10
#define INF 9999 


int minDistance(int dist[], int visited[], int n) {
    int min = INF, min_index;
    for (int v = 0; v < n; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}


void printPath(int parent[], int j) {
    if (parent[j] == -1) {
        printf("%d", j);
        return;
    }
    printPath(parent, parent[j]);
    printf(" --> %d", j);
}


void printSolution(int dist[], int n, int parent[], int src) {
    printf("Vertex\t\tDistance from Source\tPath\n");
    for (int i = 0; i < n; i++) {
        printf("%d \t\t %d\t\t\t", i, dist[i]);
        printPath(parent, i);
        printf("\n");
    }
}


void dijkstra(int graph[MAX][MAX], int src, int n) {
    int dist[MAX];  
    int visited[MAX]; 
    int parent[MAX];  
    
    
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
        parent[i] = -1;  
    }
    
    
    dist[src] = 0;
    
    
    for (int count = 0; count < n - 1; count++) {
        
        int u = minDistance(dist, visited, n);
        
        
        visited[u] = 1;
        
        
        for (int v = 0; v < n; v++) {
            
            if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;  
            }
        }
    }
    
    
    printSolution(dist, n, parent, src);
}

int main() {
    int n, src;
    int graph[MAX][MAX];

   
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &n);
    
    
    printf("Enter the adjacency matrix (use 9999 for no path):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    
    
    printf("Enter the source vertex: ");
    scanf("%d", &src);
    
    
    dijkstra(graph, src, n);

    return 0;
}


input:-
Enter the number of vertices in the graph: 5
Enter the adjacency matrix (use 9999 for no path):
0 10 9999 30 100
10 0 50 9999 9999
9999 50 0 20 10
30 9999 20 0 60
100 9999 10 60 0
Enter the source vertex: 0

output:-
Vertex		Distance from Source	Path
0 		 0			0
1 		 10			0 --> 1
2 		 50			0 --> 3 --> 2
3 		 30			0 --> 3
4 		 60			0 --> 3 --> 2 --> 4


Q)Write a program to compute CRC code for the polynomials CRC-12, CRC-16 and CRC CCIP 

#include <stdio.h>
#include <stdint.h>
#include <string.h>


uint16_t compute_crc12(const uint8_t *data, size_t length) {
    uint16_t crc = 0xFFF; 
    const uint16_t polynomial = 0x80F; 

    for (size_t i = 0; i < length; i++) {
        crc ^= (data[i] << 4); 
        for (int j = 0; j < 8; j++) {
            if (crc & 0x800) {
                crc = (crc << 1) ^ polynomial; 
            } else {
                crc <<= 1; 
            }
        }
    }
    return crc & 0xFFF; 
}


uint16_t compute_crc16(const uint8_t *data, size_t length) {
    uint16_t crc = 0xFFFF; 
    const uint16_t polynomial = 0x8005; 

    for (size_t i = 0; i < length; i++) {
        crc ^= (data[i] << 8); 
        for (int j = 0; j < 8; j++) {
            if (crc & 0x8000) {
                crc = (crc << 1) ^ polynomial; 
            } else {
                crc <<= 1; 
            }
        }
    }
    return crc & 0xFFFF; 
}


uint16_t compute_crc_ccitt(const uint8_t *data, size_t length) {
    uint16_t crc = 0xFFFF; 
    const uint16_t polynomial = 0x1021; 

    for (size_t i = 0; i < length; i++) {
        crc ^= (data[i] << 8); 
        for (int j = 0; j < 8; j++) {
            if (crc & 0x8000) {
                crc = (crc << 1) ^ polynomial; 
            } else {
                crc <<= 1; 
            }
        }
    }
    return crc & 0xFFFF; 
}

int main() {
    uint8_t data[] = "Hello, CRC!"; 
    size_t length = strlen((char *)data); 

    printf("Data: %s\n", data);
    printf("CRC-12: %03X\n", compute_crc12(data, length)); 
    printf("CRC-16: %04X\n", compute_crc16(data, length));
    printf("CRC-CCITT: %04X\n", compute_crc_ccitt(data, length)); 

    return 0;
}


output:-
Data: Hello, CRC!
CRC-12: 0BA
CRC-16: B612
CRC-CCITT: CC97

Q)Take an example subnet of hosts and obtain a broadcast tree for the subnet


#include <stdio.h>
#include <stdbool.h>

#define MAX 10

int graph[MAX][MAX];
int n; 


void bfs(int start) {
    bool visited[MAX] = {false}; 
    int queue[MAX], front = 0, rear = 0;
    
    
    queue[rear++] = start;
    visited[start] = true;
    
    printf("Broadcast Tree:\n");
    
    while (front < rear) {
        int current = queue[front++];
        printf("%d ", current);
        
        
        for (int i = 0; i < n; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                visited[i] = true;
                queue[rear++] = i;
            }
        }
    }
    printf("\n");
}

int main() {
    int i, j, root;
    
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    
    
    printf("Enter the adjacency matrix (use 1 for connected, 0 for not connected):\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    
    printf("Enter the root node (0 to %d): ", n - 1);
    scanf("%d", &root);
    
    
    if (root < 0 || root >= n) {
        printf("Invalid root node.\n");
        return 1;
    }
    
    
    bfs(root);
    
    return 0;
}


input:-
Enter the number of nodes: 5
Enter the adjacency matrix (use 1 for connected, 0 for not connected):
0 1 0 0 1
1 0 1 0 0
0 1 0 1 0
0 0 1 0 1
1 0 0 1 0
Enter the root node (0 to 4): 0

output:-
Broadcast Tree:
0 1 4 2 3

Q)Implement distance vector routing algorithm for obtaining routing tables at each node

#include <stdio.h>
#include <limits.h>

#define MAX_NODES 10
#define INF INT_MAX

void printRoutingTable(int dist[MAX_NODES][MAX_NODES], int n);

int main() {
    int n; 
    int cost[MAX_NODES][MAX_NODES]; 
    int dist[MAX_NODES][MAX_NODES]; 

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    
    printf("Enter the cost matrix (use -1 for no direct connection):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == -1 && i != j) {
                cost[i][j] = INF;
            }
        }
    }

    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dist[i][j] = cost[i][j];
        }
    }

    
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] < INF && dist[k][j] < INF && dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    
    printRoutingTable(dist, n);

    return 0;
}


void printRoutingTable(int dist[MAX_NODES][MAX_NODES], int n) {
    printf("\nRouting Table:\n");
    printf("From \\ To");
    for (int i = 0; i < n; i++) {
        printf("\t%d", i);
    }
    printf("\n");

    for (int i = 0; i < n; i++) {
        printf("%d", i);
        for (int j = 0; j < n; j++) {
            if (dist[i][j] == INF) {
                printf("\tINF");
            } else {
                printf("\t%d", dist[i][j]);
            }
        }
        printf("\n");
    }
}

input:-
Enter the number of nodes: 4
Enter the cost matrix (use -1 for no direct connection):
0 10 15 -1
10 0 5 20
15 5 0 10
-1 20 10 0


output:-
Routing Table:
From \ To   0    1    2    3
0           0   10   15   25
1           10   0    5    15
2           15   5    0    10
3           25   15   10   0


Q)Write a program for congestion control using Leaky bucket algorithm.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUCKET_CAPACITY 10   
#define LEAK_RATE 1          


void leakyBucket(int packetArrivalRate, int simulationTime) {
    int bucket = 0; 
    int time = 0;
    
    while (time < simulationTime) {
        sleep(1); 
        bucket = bucket > LEAK_RATE ? bucket - LEAK_RATE : 0;
        
        int packetsArriving = rand() % (packetArrivalRate + 1); 
        printf("Time: %d seconds | Packets Arriving: %d | Bucket Level: %d\n", time, packetsArriving, bucket);
        
        bucket += packetsArriving;
        if (bucket > BUCKET_CAPACITY) {
            printf("Bucket Overflow! Dropping %d packets.\n", bucket - BUCKET_CAPACITY);
            bucket = BUCKET_CAPACITY; 
        }
        
        time++;
    }
}

int main() {
    int packetArrivalRate, simulationTime;
    
    printf("Enter the maximum packet arrival rate (packets per second): ");
    scanf("%d", &packetArrivalRate);
    printf("Enter the simulation time (seconds): ");
    scanf("%d", &simulationTime);
    
    leakyBucket(packetArrivalRate, simulationTime);
    
    return 0;
}

input:-
Enter the maximum packet arrival rate (packets per second): 5
Enter the simulation time (seconds): 10

output:-
Time: 0 seconds | Packets Arriving: 3 | Bucket Level: 0
Time: 1 seconds | Packets Arriving: 4 | Bucket Level: 3
Time: 2 seconds | Packets Arriving: 2 | Bucket Level: 3
Time: 3 seconds | Packets Arriving: 1 | Bucket Level: 2
Time: 4 seconds | Packets Arriving: 5 | Bucket Level: 2
Time: 5 seconds | Packets Arriving: 3 | Bucket Level: 1
Time: 6 seconds | Packets Arriving: 1 | Bucket Level: 0
Time: 7 seconds | Packets Arriving: 2 | Bucket Level: 0
Time: 8 seconds | Packets Arriving: 4 | Bucket Level: 2
Time: 9 seconds | Packets Arriving: 3 | Bucket Level: 3

Q)Data Encryption and Decryption using Caesar Cipher

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LENGTH 100


void encrypt(char *text, int shift) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char base = islower(text[i]) ? 'a' : 'A';
            text[i] = (text[i] - base + shift) % 26 + base;
        }
    }
}


void decrypt(char *text, int shift) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char base = islower(text[i]) ? 'a' : 'A';
            text[i] = (text[i] - base - shift + 26) % 26 + base;
        }
    }
}

int main() {
    char text[MAX_LENGTH];
    int shift;
    
    
    printf("Enter the text to encrypt: ");
    fgets(text, MAX_LENGTH, stdin);
    text[strcspn(text, "\n")] = '\0'; 
    
    
    printf("Enter shift value: ");
    scanf("%d", &shift);
    
    
    char encrypted[MAX_LENGTH];
    strcpy(encrypted, text);
    encrypt(encrypted, shift);
    printf("Encrypted text: %s\n", encrypted);
    
    
    char decrypted[MAX_LENGTH];
    strcpy(decrypted, encrypted);
    decrypt(decrypted, shift);
    printf("Decrypted text: %s\n", decrypted);
    
    return 0;
}


input:-
Enter the text to encrypt: Hello World
Enter shift value: 3

output:-
Encrypted text: Khoor Zruog
Decrypted text: Hello World



